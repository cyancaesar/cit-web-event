datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  sessions  Session[]
  events    Event[]
  logs  Log[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Event {
  id                   String   @id @default(cuid())
  title                String
  organizer            String
  department           String
  date_from            DateTime
  date_to              DateTime
  place                String
  time                 String
  targetAudience       String
  registrationProcess  String
  advertisementProcess String
  instructorsAndGuests String
  maleAttendees        Int
  femaleAttendees      Int
  otherAttendees       Int
  totalAttendees       Int
  type                 String
  category             String
  eventGoals           String
  eventPlanning        String
  eventTiming          String
  eventFeedbacks       String
  enhancePriority      String
  workTeam             String
  acadAffairsPlan      String
  univStratPlan        String
  tuga                 String
  files                File[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String?
  user                 User?    @relation(references: [id], fields: [userId], onDelete: SetNull)
}

model File {
  id        String   @id @default(cuid())
  objectKey String
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
